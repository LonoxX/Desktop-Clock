name: Build, Version and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  get-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_next_version.outputs.version }}
      has-next-version: ${{ steps.get_next_version.outputs.hasNextVersion }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine next version
      uses: thenativeweb/get-next-version@main
      id: get_next_version

  build-and-release:
    name: Build and Release
    needs: get-version
    if: ${{ needs.get-version.outputs.has-next-version == 'true' }}
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Update version in csproj
      run: |
        $VERSION="${{ needs.get-version.outputs.version }}"
        $CSPROJ_FILE="DesktopClock.csproj"

        # Load XML file
        $xml = [xml](Get-Content $CSPROJ_FILE)

        # Update version information - use SelectSingleNode to ensure we find the correct elements
        $nsManager = New-Object System.Xml.XmlNamespaceManager($xml.NameTable)
        $propertyGroup = $xml.SelectNodes("//PropertyGroup")[0]

        # Update each version property individually
        $versionPrefix = $propertyGroup.SelectSingleNode("VersionPrefix")
        if ($versionPrefix) { $versionPrefix.InnerText = $VERSION }

        $assemblyVersion = $propertyGroup.SelectSingleNode("AssemblyVersion")
        if ($assemblyVersion) { $assemblyVersion.InnerText = "$VERSION.0" }

        $fileVersion = $propertyGroup.SelectSingleNode("FileVersion")
        if ($fileVersion) { $fileVersion.InnerText = "$VERSION.0" }

        $informationalVersion = $propertyGroup.SelectSingleNode("InformationalVersion")
        if ($informationalVersion) { $informationalVersion.InnerText = $VERSION }

        # Update the IncrementBuildNumber target's version numbers
        $incrementBuildNumberTarget = $xml.SelectSingleNode("//Target[@Name='IncrementBuildNumber']")
        if ($incrementBuildNumberTarget) {
          $incrementPropertyGroup = $incrementBuildNumberTarget.SelectSingleNode(".//PropertyGroup[last()]")
          if ($incrementPropertyGroup) {
            $incrementAssemblyVersion = $incrementPropertyGroup.SelectSingleNode("AssemblyVersion")
            if ($incrementAssemblyVersion) { $incrementAssemblyVersion.InnerText = "$VERSION.`$(NewBuildNumber)" }

            $incrementFileVersion = $incrementPropertyGroup.SelectSingleNode("FileVersion")
            if ($incrementFileVersion) { $incrementFileVersion.InnerText = "$VERSION.`$(NewBuildNumber)" }

            $incrementInformationalVersion = $incrementPropertyGroup.SelectSingleNode("InformationalVersion")
            if ($incrementInformationalVersion) { $incrementInformationalVersion.InnerText = "$VERSION.`$(NewBuildNumber)" }
          }
        }

        # Save changes
        $xml.Save($CSPROJ_FILE)

        echo "Version in csproj updated to $VERSION"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: |
        $VERSION="${{ needs.get-version.outputs.version }}"
        echo "Building version v$VERSION.${{ github.run_number }}"
        dotnet publish -r win-x64 -c Release --self-contained true -p:PublishSingleFile=true -p:EnableCompressionInSingleFile=true -p:AssemblyVersion=$VERSION.${{ github.run_number }} -p:FileVersion=$VERSION.${{ github.run_number }} -p:Version=$VERSION.${{ github.run_number }}
      shell: pwsh

    - name: Commit and push changes
      run: |
        $VERSION="v${{ needs.get-version.outputs.version }}"
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add DesktopClock.csproj
        git commit -m "Update Version to $VERSION [skip ci]"
        git push origin main
        git tag $VERSION
        git push origin $VERSION
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DesktopClock
        path: bin/Release/net9.0-windows/win-x64/publish/DesktopClock.exe

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: bin/Release/net9.0-windows/win-x64/publish/DesktopClock.exe
        name: Release v${{ needs.get-version.outputs.version }}
        tag_name: v${{ needs.get-version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}
